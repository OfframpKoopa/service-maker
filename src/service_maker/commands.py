import subprocess
import argparse
import json

from abc import ABC


class Command(ABC):
    def execute(self, **kwargs) -> None:
        raise NotImplementedError("execute(self, **kwargs")


class Create(Command):
    def __init__(self, arg_np: argparse.Namespace) -> None:
        self.arg_np = arg_np

    def execute(self) -> str:
        """ Implements the create method """

        def write_service(ordered_args: dict) -> None:
            """ Write the service file, 
            then sudo cp in systemd folder """
            service_filename = ordered_args['Meta']['Name'] + '.service'
            with open(service_filename, 'w') as f:
                f.write("# File generated by ServiceMaker\n")

            with open(service_filename, 'a+') as f:
                for section, lines in ordered_args.items():
                    if section == "Meta":
                        continue
                    f.write(f"\n[{section}]\n")
                    for l in lines:
                        f.write(f"{l}\n")

            subprocess.run(f"sudo mv {service_filename} /etc/systemd/system/", shell=True, text=True, capture_output=True)


        datas = self.arg_np.datas
        ordered_args = {}
        ordered_args['Unit'] = []
        ordered_args['Service'] = []
        ordered_args['Install'] = []
        ordered_args['Meta'] = {} 
        for param, values in vars(self.arg_np).items():
            section = ""
            if param.startswith('_'):
                continue
            if not values:
                continue
            if param in datas['Unit']:
                section = 'Unit'
            if param in datas['Service']:
                section = 'Service'
            if param in datas['Install']:
                section = 'Install'
            if param in datas['Meta']:
                section = 'Meta'
            if not section:
                continue
            for v in values:
                if section == 'Meta':
                    ordered_args[section][param] = v
                else:
                    line = param + '=' + v
                    ordered_args[section].append(line)
        write_service(ordered_args)
        return self.arg_np.Name


class Update(Command):
    def __init__(self, args: argparse.Namespace) -> None:
        self.args = args

    def execute(self) -> str:
        """ Implements the update method """
        raise NotImplementedError("Not yet implemented")

